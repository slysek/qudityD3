Index: QuditsOnQubits/pyproject.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[build-system]\r\nrequires = [\"setuptools>=61.0\"]\r\nbuild-backend = \"setuptools.build_meta\"\r\n\r\n[project]\r\nname = \"QuditsOnQubits\"\r\nversion = \"0.0.1\"\r\ndescription = \"Testt  tt\"\r\nreadme = \"README.md\"\r\nlicense = {file = \"LICENSE\"}\r\nauthors = [\r\n    { name=\"Szymon\", email=\"test@test.test\"}\r\n]\r\nkeywords = [\"quantum\", \"ghz\", \"qiskit\"]\r\nclassifiers = [\r\n    \"Programming Language :: Python :: 3\",\r\n    \"License :: OSI Approved :: MIT License\",\r\n    \"Operating System :: OS Independent\"\r\n]\r\ndependencies = [\r\n    \"qiskit\",\r\n    \"matplotlib\",\r\n\r\n]\r\nrequires-python = \">=3.8\"\r\n\r\n[project.urls]\r\nHomepage = \"https://github.com/twoj/projekt\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/QuditsOnQubits/pyproject.toml b/QuditsOnQubits/pyproject.toml
--- a/QuditsOnQubits/pyproject.toml	(revision 090da3ca4086661a8c49bfd7f5ed2e3c83e65783)
+++ b/QuditsOnQubits/pyproject.toml	(date 1740834540310)
@@ -20,6 +20,7 @@
 dependencies = [
     "qiskit",
     "matplotlib",
+    "qiskit_aer"
 
 ]
 requires-python = ">=3.8"
Index: QuditsOnQubits/chshTEST.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"id\": \"initial_id\",\r\n   \"metadata\": {\r\n    \"collapsed\": true,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:01.787755Z\",\r\n     \"start_time\": \"2025-02-28T16:48:58.811516Z\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"from qiskit.quantum_info import Statevector\\n\",\r\n    \"from QuditsOnQubits import QuditsOnQubits\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"import networkx as nx\\n\",\r\n    \"from numpy.linalg import multi_dot\\n\",\r\n    \"import matplotlib.pyplot as plt\"\r\n   ],\r\n   \"outputs\": [],\r\n   \"execution_count\": 1\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Definicja Z i X qutrytowych zakodowanych na qubitach\",\r\n   \"id\": \"af9567bc18aa50c9\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:02.277934Z\",\r\n     \"start_time\": \"2025-02-28T16:49:02.264936Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"omega = np.exp(2*np.pi*1.j/3)\\n\",\r\n    \"Z = [[1, 0, 0, 0], [0, omega, 0, 0], [0, 0, omega*omega, 0], [0, 0, 0, 1]]\\n\",\r\n    \"X = [[0,0,1,0], [1,0,0,0], [0,1,0,0],[0,0,0,1]]\"\r\n   ],\r\n   \"id\": \"6e5c558d4c83f304\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 2\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T17:01:51.278977Z\",\r\n     \"start_time\": \"2025-02-28T17:01:51.268930Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"qubit0 = np.array([[1], [0]])\\n\",\r\n    \"qubit1 = np.array([[0], [1]])\\n\",\r\n    \"\\n\",\r\n    \"Qtrt0 = np.kron(qubit0, qubit0)\\n\",\r\n    \"Qtrt1 = np.kron(qubit0, qubit1)\\n\",\r\n    \"Qtrt2 = np.kron(qubit1, qubit0)\"\r\n   ],\r\n   \"id\": \"f70ef80398368ffd\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 36\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T17:02:34.616819Z\",\r\n     \"start_time\": \"2025-02-28T17:02:34.605150Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"Qtrt0\",\r\n   \"id\": \"edacbe99a34cf3c0\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"array([[1],\\n\",\r\n       \"       [0],\\n\",\r\n       \"       [0],\\n\",\r\n       \"       [0]])\"\r\n      ]\r\n     },\r\n     \"execution_count\": 38,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 38\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T17:02:42.365649Z\",\r\n     \"start_time\": \"2025-02-28T17:02:42.356653Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"Qtrt1\",\r\n   \"id\": \"91c1af152325e7f9\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"array([[0],\\n\",\r\n       \"       [1],\\n\",\r\n       \"       [0],\\n\",\r\n       \"       [0]])\"\r\n      ]\r\n     },\r\n     \"execution_count\": 39,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 39\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T17:02:47.332185Z\",\r\n     \"start_time\": \"2025-02-28T17:02:47.313189Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"Qtrt2\",\r\n   \"id\": \"2cc9bb56a1ab20fb\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"array([[0],\\n\",\r\n       \"       [0],\\n\",\r\n       \"       [1],\\n\",\r\n       \"       [0]])\"\r\n      ]\r\n     },\r\n     \"execution_count\": 40,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 40\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T17:03:24.886296Z\",\r\n     \"start_time\": \"2025-02-28T17:03:24.873292Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"np.dot(Z, Qtrt2)\",\r\n   \"id\": \"b1e5e31483171836\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"array([[ 0. +0.j       ],\\n\",\r\n       \"       [ 0. +0.j       ],\\n\",\r\n       \"       [-0.5-0.8660254j],\\n\",\r\n       \"       [ 0. +0.j       ]])\"\r\n      ]\r\n     },\r\n     \"execution_count\": 45,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 45\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Tworze graf ame43\",\r\n   \"id\": \"df42fce4127c3d03\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:03.029687Z\",\r\n     \"start_time\": \"2025-02-28T16:49:02.911290Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"SQ = nx.MultiGraph()\\n\",\r\n    \"\\n\",\r\n    \"#dodawanie wezlow\\n\",\r\n    \"SQ.add_nodes_from([0, 3])\\n\",\r\n    \"\\n\",\r\n    \"#dodawanie kolejnych krawedzi\\n\",\r\n    \"SQ.add_edge(0, 1)\\n\",\r\n    \"SQ.add_edge(1, 2)\\n\",\r\n    \"SQ.add_edge(2, 3)\\n\",\r\n    \"SQ.add_edge(2, 3)\\n\",\r\n    \"SQ.add_edge(3, 0)\\n\",\r\n    \"\\n\",\r\n    \"#rysowania grafu\\n\",\r\n    \"nx.draw(SQ, with_labels=True, font_weight='bold')\\n\",\r\n    \"\\n\",\r\n    \"#wypisywanie liczby krawedzi\\n\",\r\n    \"SQ.number_of_edges()\"\r\n   ],\r\n   \"id\": \"8bc7da613b02e0ac\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"5\"\r\n      ]\r\n     },\r\n     \"execution_count\": 3,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"<Figure size 640x480 with 1 Axes>\"\r\n      ],\r\n      \"image/png\": \"\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"execution_count\": 3\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Tworze stan grafowy uzywajac stworzonej biblioteki QuditsOnQubits gdzie w argumencie mam graf\",\r\n   \"id\": \"2143508220d5a3a1\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:03.749923Z\",\r\n     \"start_time\": \"2025-02-28T16:49:03.612928Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ame43 = QuditsOnQubits(SQ)\",\r\n   \"id\": \"8ce8fd24b4ed4d46\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 4\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Tworze obwod z grafu\",\r\n   \"id\": \"4a2bc222b3202211\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:04.293965Z\",\r\n     \"start_time\": \"2025-02-28T16:49:04.281453Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ame43circ = ame43.circuit\",\r\n   \"id\": \"60a5fe70abedab7e\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 5\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Tworze stabilizatory według pracy Santosa. Wzor nr. 42 na stronie 11. \",\r\n   \"id\": \"449b52699f87b5b7\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:04.890051Z\",\r\n     \"start_time\": \"2025-02-28T16:49:04.866053Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"G1 = np.kron(np.kron(np.kron(X, Z), np.identity(4)), Z)\\n\",\r\n    \"G1G2 = np.kron(np.kron(np.kron(np.dot(X, Z), np.dot(Z, X)), Z), Z)\\n\",\r\n    \"G1G2pow2 = np.kron(np.kron(np.kron(multi_dot([X, Z, Z]), multi_dot([Z, X, X])), multi_dot([Z, Z])), Z)\\n\",\r\n    \"G3 = np.kron(np.kron(np.kron(np.identity(4), Z), X), multi_dot([Z, Z]))\\n\",\r\n    \"G1G4 = np.kron(np.kron(np.kron(multi_dot([X, Z]), Z), multi_dot([Z, Z])), multi_dot([Z, X]))\\n\",\r\n    \"\\n\",\r\n    \"# G1 = np.kron(X, np.kron(Z, np.kron(np.identity(4), Z)))\\n\",\r\n    \"# G1G2 = np.kron(np.dot(X, Z), np.kron(np.kron(Z, X), np.kron(Z, Z)))\\n\",\r\n    \"# G1G2pow2 = np.kron(np.dot(X, np.dot(Z, Z)), np.kron(np.kron(Z, np.dot(X, X)), np.kron(np.dot(Z, Z), Z)))\\n\",\r\n    \"# G3 = np.kron(np.identity(4), np.kron(Z, np.kron(X, np.dot(Z, Z))))\\n\",\r\n    \"# G1G4 = np.kron(np.dot(X, Z), np.kron(Z, np.kron(np.dot(Z, Z), np.dot(Z, X))))\"\r\n   ],\r\n   \"id\": \"b84dbdc33122b006\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 6\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:59:29.593602Z\",\r\n     \"start_time\": \"2025-02-28T16:59:29.571600Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"G1.shape\",\r\n   \"id\": \"e68a1fb1b10f7b34\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"(256, 256)\"\r\n      ]\r\n     },\r\n     \"execution_count\": 35,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 35\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Odczytuje stan z obwodu ktory stworzylem\",\r\n   \"id\": \"7f90af8fecaa7bf3\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:05.610418Z\",\r\n     \"start_time\": \"2025-02-28T16:49:05.589421Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ame43state = Statevector(ame43circ).data\",\r\n   \"id\": \"a8864e9d46a7ecb0\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 7\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Obliczam wartosc oczekiwana stabilizatora G1\",\r\n   \"id\": \"92b6508cf095fde0\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:06.209156Z\",\r\n     \"start_time\": \"2025-02-28T16:49:06.195152Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ame43matrix = ame43state.reshape(256, 1)\",\r\n   \"id\": \"f18d03ba3714ea3c\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 8\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:06.525167Z\",\r\n     \"start_time\": \"2025-02-28T16:49:06.512158Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"multi_dot([ame43matrix.conj().transpose(), G1, ame43matrix])\",\r\n   \"id\": \"bd1d552284ca17a7\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"array([[-2.9629077e-15-1.54185538e-15j]])\"\r\n      ]\r\n     },\r\n     \"execution_count\": 9,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 9\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:09.676476Z\",\r\n     \"start_time\": \"2025-02-28T16:49:08.546204Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"G1ev = ame43state.expectation_value(G1)\",\r\n   \"id\": \"29c527a39d417421\",\r\n   \"outputs\": [\r\n    {\r\n     \"ename\": \"AttributeError\",\r\n     \"evalue\": \"'numpy.ndarray' object has no attribute 'expectation_value'\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[1;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[1;31mAttributeError\\u001B[0m                            Traceback (most recent call last)\",\r\n      \"Cell \\u001B[1;32mIn[10], line 1\\u001B[0m\\n\\u001B[1;32m----> 1\\u001B[0m G1ev \\u001B[38;5;241m=\\u001B[39m \\u001B[43mame43state\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mexpectation_value\\u001B[49m(G1)\\n\",\r\n      \"\\u001B[1;31mAttributeError\\u001B[0m: 'numpy.ndarray' object has no attribute 'expectation_value'\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 10\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:09.762554100Z\",\r\n     \"start_time\": \"2025-02-27T19:28:52.617795Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"G1ev\",\r\n   \"id\": \"72b3ce35d0b9086b\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"np.complex128(-2.949029909160572e-15-1.582067810090848e-15j)\"\r\n      ]\r\n     },\r\n     \"execution_count\": 88,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 88\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Sprawdzam recznie ten stan ame43\",\r\n   \"id\": \"810d5e05afcfeea3\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:10.813800Z\",\r\n     \"start_time\": \"2025-02-28T16:49:10.801814Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"Zsolo = [[1, 0, 0], [0, omega, 0], [0, 0, omega*omega]]\\n\",\r\n    \"Xsolo = [[0,0,1], [1,0,0], [0,1,0]]\"\r\n   ],\r\n   \"id\": \"55a2736899b727fa\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 11\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:11.318446Z\",\r\n     \"start_time\": \"2025-02-28T16:49:11.308455Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"qutryt0 = np.array([[1], [0], [0]])\\n\",\r\n    \"qutryt1 = np.array([[0], [1], [0]])\\n\",\r\n    \"qutryt2 = np.array([[0], [0], [1]])\"\r\n   ],\r\n   \"id\": \"2e708fe0d682d238\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 12\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:11.808352Z\",\r\n     \"start_time\": \"2025-02-28T16:49:11.794342Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"plusQutryt = 1/np.sqrt(3) * (qutryt0 + qutryt1 + qutryt2)\",\r\n   \"id\": \"767105bc94c437c0\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 13\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Bramka CZ jest diagonalna i ma na diagonali $\\\\omega^{i * j}$, gdzie i oraz j to kombinacje wszystkich qutrytow np. $\\\\ket{0, 0}$ mamy $\\\\omega^{0 * 0}$, dla $\\\\ket{0, 1}$ mamy $\\\\omega^{0 * 1}$ itd\",\r\n   \"id\": \"e6881cfec11ea8b8\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:12.517673Z\",\r\n     \"start_time\": \"2025-02-28T16:49:12.509676Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"CZqutryt = np.diag([1, 1, 1, 1, omega, omega*omega, 1, omega*omega, omega])\",\r\n   \"id\": \"c2160e133335c133\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 14\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Robie plusy na kazdym wierzcholku\",\r\n   \"id\": \"78e6e84fa597f9ae\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:13.368746Z\",\r\n     \"start_time\": \"2025-02-28T16:49:13.350747Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"stanPlus = np.kron(np.kron(np.kron(plusQutryt, plusQutryt), plusQutryt), plusQutryt)\",\r\n   \"id\": \"accd5aa432da01af\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 15\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:13.710642Z\",\r\n     \"start_time\": \"2025-02-28T16:49:13.701673Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"CZ01 = np.kron(CZqutryt, np.kron(np.identity(3), np.identity(3)))\\n\",\r\n    \"CZ12 = np.kron(np.identity(3), np.kron(CZqutryt, np.identity(3)))\\n\",\r\n    \"CZ23 = np.kron(np.identity(3), np.kron(np.identity(3), CZqutryt))\"\r\n   ],\r\n   \"id\": \"d30f0819581f6c59\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 16\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Robie funkcje poniewaz nie moge bezposrednio uzyc np.kron bo qutryty nie sa obok siebie tylko na dwoch koncach, wiec tworze juz caly stan CZ03 odrazu.\",\r\n   \"id\": \"fae8dd8b6b363e4f\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:14.541815Z\",\r\n     \"start_time\": \"2025-02-28T16:49:14.531815Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def CZ_30_4qutrits():\\n\",\r\n    \"    d = 3\\n\",\r\n    \"    dim = d**4\\n\",\r\n    \"    diag_elements = np.zeros(dim, dtype=complex)\\n\",\r\n    \"\\n\",\r\n    \"    omega = np.exp(2j * np.pi / d) \\n\",\r\n    \"\\n\",\r\n    \"    index = 0\\n\",\r\n    \"    for x0 in range(d):\\n\",\r\n    \"        for x1 in range(d):\\n\",\r\n    \"            for x2 in range(d):\\n\",\r\n    \"                for x3 in range(d):\\n\",\r\n    \"                    \\n\",\r\n    \"                    diag_elements[index] = omega ** (x0 * x3)\\n\",\r\n    \"                    index += 1\\n\",\r\n    \"\\n\",\r\n    \"    return np.diag(diag_elements)\\n\",\r\n    \"\\n\",\r\n    \"CZ30 = CZ_30_4qutrits()\"\r\n   ],\r\n   \"id\": \"e2aa06a11dc5f18e\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 17\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Robie CZ na kazdej krawedzi i lacze ze stanem plus na kazdym wierzcholku\",\r\n   \"id\": \"24a937b78c0ccc7b\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:15.073749Z\",\r\n     \"start_time\": \"2025-02-28T16:49:15.065745Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ame43test = multi_dot([CZ01, CZ12, CZ23, CZ23, CZ30, stanPlus])\",\r\n   \"id\": \"c84a61856e289f01\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 18\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:15.778584Z\",\r\n     \"start_time\": \"2025-02-28T16:49:15.759570Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ame43test.shape\",\r\n   \"id\": \"83a92d593f7e6829\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"(81, 1)\"\r\n      ]\r\n     },\r\n     \"execution_count\": 19,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 19\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Analogicznie do tworzenia poprzednich stabilizatorow\",\r\n   \"id\": \"6f8defb015eb1dea\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:16.795532Z\",\r\n     \"start_time\": \"2025-02-28T16:49:16.778533Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"G1test = np.kron(np.kron(np.kron(Xsolo, Zsolo), np.identity(3)), Zsolo)\\n\",\r\n    \"G1G2test = np.kron(np.kron(np.kron(np.dot(Xsolo, Zsolo), np.dot(Zsolo, Xsolo)), Zsolo), Zsolo)\\n\",\r\n    \"G1G2pow2test = np.kron(np.kron(np.kron(multi_dot([Xsolo, Zsolo, Zsolo]), multi_dot([Zsolo, Xsolo, Xsolo])), multi_dot([Zsolo, Zsolo])), Zsolo)\\n\",\r\n    \"G3test = np.kron(np.kron(np.kron(np.identity(3), Zsolo), Xsolo), multi_dot([Zsolo, Zsolo]))\\n\",\r\n    \"G1G4test = np.kron(np.kron(np.kron(multi_dot([Xsolo, Zsolo]), Zsolo), multi_dot([Zsolo, Zsolo])), multi_dot([Zsolo, Xsolo]))\\n\",\r\n    \"\\n\",\r\n    \"# G1test = np.kron(Xsolo, np.kron(Zsolo, np.kron(np.identity(3), Zsolo)))\\n\",\r\n    \"# G1G2test = np.kron(np.dot(Xsolo, Zsolo), np.kron(np.kron(Zsolo, Xsolo), np.kron(Zsolo, Zsolo)))\\n\",\r\n    \"# G1G2pow2test = np.kron(np.dot(Xsolo, np.dot(Zsolo, Zsolo)), np.kron(np.kron(Zsolo, np.dot(Xsolo, Xsolo)), np.kron(np.dot(Zsolo, Zsolo), Zsolo)))\\n\",\r\n    \"# G3test = np.kron(np.identity(3), np.kron(Zsolo, np.kron(Xsolo, np.dot(Zsolo, Zsolo))))\\n\",\r\n    \"# G1G4test = np.kron(np.dot(Xsolo, Zsolo), np.kron(Zsolo, np.kron(np.dot(Zsolo, Zsolo), np.dot(Zsolo, Xsolo))))\"\r\n   ],\r\n   \"id\": \"92b32283b70d2ef9\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 20\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Obliczam recznie $\\\\braket{ame43|G1|ame43}$\",\r\n   \"id\": \"6c962b7171390816\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:19.327871Z\",\r\n     \"start_time\": \"2025-02-28T16:49:19.313892Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"multi_dot([ame43test.conj().transpose(), G1test, ame43test])\",\r\n   \"id\": \"e5a76d29d840ebcf\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"array([[1.-4.21537805e-16j]])\"\r\n      ]\r\n     },\r\n     \"execution_count\": 21,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 21\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:21.000716Z\",\r\n     \"start_time\": \"2025-02-28T16:49:20.988697Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"operatory = [G1test, G1G2test, G1G2pow2test, G3test, G1G4test]\",\r\n   \"id\": \"e2b37682c3ed6029\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 22\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:22.205922Z\",\r\n     \"start_time\": \"2025-02-28T16:49:22.186926Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"suma = 0\\n\",\r\n    \"for i in operatory:\\n\",\r\n    \"    suma += np.real(multi_dot([ame43test.conj().transpose(), i, ame43test]))\\n\",\r\n    \"    print(np.real(multi_dot([ame43test.conj().transpose(), i, ame43test])))\\n\",\r\n    \"    \\n\",\r\n    \"print(suma)\"\r\n   ],\r\n   \"id\": \"e7ca96ccb720b3d7\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[[1.]]\\n\",\r\n      \"[[1.]]\\n\",\r\n      \"[[1.]]\\n\",\r\n      \"[[1.]]\\n\",\r\n      \"[[1.]]\\n\",\r\n      \"[[5.]]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 23\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:25.576386Z\",\r\n     \"start_time\": \"2025-02-28T16:49:25.562377Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def exp_val(op):\\n\",\r\n    \"    return np.real(multi_dot([ame43test.conj().transpose(), op, ame43test]))\"\r\n   ],\r\n   \"id\": \"ab022f150857c494\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 24\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:26.292605Z\",\r\n     \"start_time\": \"2025-02-28T16:49:26.278662Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"B_ame = G1test + G1G2pow2test + 0.5*(G1G2test + G1G4test) + G3test + G1test.conj().T + G1G2pow2test.conj().T + 0.5*(G1G2test.conj().T + G1G4test.conj().T) + G3test.conj().T\",\r\n   \"id\": \"1198c8e8b6a46d3e\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 25\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:49:26.654425Z\",\r\n     \"start_time\": \"2025-02-28T16:49:26.636426Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"np.real(multi_dot([ame43test.conj().transpose(), B_ame, ame43test]))\",\r\n   \"id\": \"d8096f3ba1615305\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"array([[8.]])\"\r\n      ]\r\n     },\r\n     \"execution_count\": 26,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 26\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": \"Porownanie z wczesniejszym wynikiem\",\r\n   \"id\": \"a711eb1ae5777791\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:56:00.808805Z\",\r\n     \"start_time\": \"2025-02-28T16:56:00.648809Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"Statevector(ame43test).draw('latex')\",\r\n   \"id\": \"936881879fa1af07\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"<IPython.core.display.Latex object>\"\r\n      ],\r\n      \"text/latex\": \"$$\\\\begin{align}\\n\\n\\n\\\\begin{bmatrix}\\n\\\\frac{1}{9} & \\\\frac{1}{9} & \\\\frac{1}{9} & \\\\frac{1}{9} & \\\\cdots & -0.0555555556 - 0.0962250449 i & -0.0555555556 - 0.0962250449 i & -0.0555555556 - 0.0962250449 i  \\\\\\\\\\n \\\\end{bmatrix}\\n\\\\\\\\\\n\\\\text{dims=(81,)}\\n\\\\end{align}$$\"\r\n     },\r\n     \"execution_count\": 34,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 34\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T17:05:29.263752Z\",\r\n     \"start_time\": \"2025-02-28T17:05:29.094774Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"Statevector(ame43matrix).draw('latex')\",\r\n   \"id\": \"d84636b9096e6972\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"<IPython.core.display.Latex object>\"\r\n      ],\r\n      \"text/latex\": \"$$\\\\frac{1}{9} |00000000\\\\rangle+\\\\frac{1}{9} |00000001\\\\rangle+\\\\frac{1}{9} |00000010\\\\rangle+\\\\frac{1}{9} |00000100\\\\rangle+(-0.0555555556 + 0.0962250449 i) |00000101\\\\rangle+(-0.0555555556 - 0.0962250449 i) |00000110\\\\rangle + \\\\ldots +(-0.0555555556 + 0.0962250449 i) |10100101\\\\rangle+(-0.0555555556 + 0.0962250449 i) |10100110\\\\rangle+\\\\frac{1}{9} |10101000\\\\rangle+(-0.0555555556 + 0.0962250449 i) |10101001\\\\rangle+(-0.0555555556 - 0.0962250449 i) |10101010\\\\rangle$$\"\r\n     },\r\n     \"execution_count\": 46,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 46\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T17:10:37.233321Z\",\r\n     \"start_time\": \"2025-02-28T17:10:37.212311Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"nonzero_dict = Statevector(ame43test).to_dict()\\n\",\r\n    \"num_terms = len(nonzero_dict)\\n\",\r\n    \"print(\\\"Liczba niezerowych składników w tym Statevector:\\\", num_terms)\"\r\n   ],\r\n   \"id\": \"b9f3ebb347a5b9b8\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Liczba niezerowych składników w tym Statevector: 81\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 48\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:45:28.704616Z\",\r\n     \"start_time\": \"2025-02-28T16:45:28.664976Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"G1ev\",\r\n   \"id\": \"b28f2fdd082d90d9\",\r\n   \"outputs\": [\r\n    {\r\n     \"ename\": \"NameError\",\r\n     \"evalue\": \"name 'G1ev' is not defined\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[1;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[1;31mNameError\\u001B[0m                                 Traceback (most recent call last)\",\r\n      \"Cell \\u001B[1;32mIn[34], line 1\\u001B[0m\\n\\u001B[1;32m----> 1\\u001B[0m \\u001B[43mG1ev\\u001B[49m\\n\",\r\n      \"\\u001B[1;31mNameError\\u001B[0m: name 'G1ev' is not defined\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 34\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-28T16:48:44.243635Z\",\r\n     \"start_time\": \"2025-02-28T16:48:44.202639Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"diff = ame43matrix - am43test\",\r\n   \"id\": \"16d8e27e35bddd92\",\r\n   \"outputs\": [\r\n    {\r\n     \"ename\": \"NameError\",\r\n     \"evalue\": \"name 'am43test' is not defined\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[1;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[1;31mNameError\\u001B[0m                                 Traceback (most recent call last)\",\r\n      \"Cell \\u001B[1;32mIn[38], line 1\\u001B[0m\\n\\u001B[1;32m----> 1\\u001B[0m diff \\u001B[38;5;241m=\\u001B[39m ame43matrix \\u001B[38;5;241m-\\u001B[39m \\u001B[43mam43test\\u001B[49m\\n\",\r\n      \"\\u001B[1;31mNameError\\u001B[0m: name 'am43test' is not defined\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 38\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T19:48:27.349144Z\",\r\n     \"start_time\": \"2025-02-27T19:48:27.232411Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ghz_circ = QuditsOnQubits().circuit\",\r\n   \"id\": \"3e7b0c397f6d5443\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 2\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T19:48:37.281921Z\",\r\n     \"start_time\": \"2025-02-27T19:48:37.263924Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ghz_circ[0].remove_final_measurements()\",\r\n   \"id\": \"7a6be3def90ea852\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 3\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"code\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null,\r\n   \"source\": \"ghz_circ[1]\",\r\n   \"id\": \"5ba632f6c283a89f\"\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T19:44:00.927105Z\",\r\n     \"start_time\": \"2025-02-27T19:44:00.919106Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ghz_circ\",\r\n   \"id\": \"5f1905d517900944\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"<qiskit.circuit.quantumcircuit.QuantumCircuit at 0x2b03a59e620>\"\r\n      ]\r\n     },\r\n     \"execution_count\": 116,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 116\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T19:48:50.801861Z\",\r\n     \"start_time\": \"2025-02-27T19:48:50.784853Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ghz_matrix = Statevector(ghz_circ[1])\",\r\n   \"id\": \"4c152f83969dfb92\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 4\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T19:48:52.825404Z\",\r\n     \"start_time\": \"2025-02-27T19:48:51.745405Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ghz_matrix.draw('latex')\",\r\n   \"id\": \"2e779e4b7214faa4\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"<IPython.core.display.Latex object>\"\r\n      ],\r\n      \"text/latex\": \"$$- \\\\frac{\\\\sqrt{3}}{3} |000000\\\\rangle- \\\\frac{\\\\sqrt{3}}{3} |010101\\\\rangle- \\\\frac{\\\\sqrt{3}}{3} |101010\\\\rangle$$\"\r\n     },\r\n     \"execution_count\": 5,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 5\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T19:50:07.159835Z\",\r\n     \"start_time\": \"2025-02-27T19:50:07.151834Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"g1 = np.kron(np.kron(Z, X), X)\\n\",\r\n    \"g2 = np.kron(np.kron(X, Z), np.identity(4))\\n\",\r\n    \"g3 = np.kron(np.kron(X, np.identity(4)), Z)\"\r\n   ],\r\n   \"id\": \"d11fed07f4e1314e\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 8\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T19:51:21.201719Z\",\r\n     \"start_time\": \"2025-02-27T19:51:21.184716Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"multi_dot([ghz_matrix.data.conj().transpose(), g1, ghz_matrix.data])\",\r\n   \"id\": \"590dbb9e7819066f\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"np.complex128(-2.4421441894360897e-16+1.5402969882312747e-18j)\"\r\n      ]\r\n     },\r\n     \"execution_count\": 13,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 13\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"code\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null,\r\n   \"source\": \"\",\r\n   \"id\": \"9a3fc4e1b8632fb8\"\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/QuditsOnQubits/chshTEST.ipynb b/QuditsOnQubits/chshTEST.ipynb
--- a/QuditsOnQubits/chshTEST.ipynb	(revision 090da3ca4086661a8c49bfd7f5ed2e3c83e65783)
+++ b/QuditsOnQubits/chshTEST.ipynb	(date 1740834247288)
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2025-02-28T16:49:01.787755Z",
-     "start_time": "2025-02-28T16:48:58.811516Z"
+     "end_time": "2025-03-01T13:03:54.987741Z",
+     "start_time": "2025-03-01T13:03:50.767589Z"
     }
    },
    "source": [
@@ -18,7 +18,21 @@
     "from numpy.linalg import multi_dot\n",
     "import matplotlib.pyplot as plt"
    ],
-   "outputs": [],
+   "outputs": [
+    {
+     "ename": "ModuleNotFoundError",
+     "evalue": "No module named 'qiskit_aer'",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[1;31mModuleNotFoundError\u001B[0m                       Traceback (most recent call last)",
+      "Cell \u001B[1;32mIn[1], line 2\u001B[0m\n\u001B[0;32m      1\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mqiskit\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mquantum_info\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m Statevector\n\u001B[1;32m----> 2\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mQuditsOnQubits\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m QuditsOnQubits\n\u001B[0;32m      3\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mnumpy\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m \u001B[38;5;21;01mnp\u001B[39;00m\n\u001B[0;32m      4\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mnetworkx\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m \u001B[38;5;21;01mnx\u001B[39;00m\n",
+      "File \u001B[1;32m~\\DataspellProjects\\qudityD3\\QuditsOnQubits\\QuditsOnQubits\\__init__.py:1\u001B[0m\n\u001B[1;32m----> 1\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mmain\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m QuditsOnQubits\n",
+      "File \u001B[1;32m~\\DataspellProjects\\qudityD3\\QuditsOnQubits\\QuditsOnQubits\\main.py:10\u001B[0m\n\u001B[0;32m      8\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mqiskit\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mtranspiler\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mpreset_passmanagers\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m generate_preset_pass_manager\n\u001B[0;32m      9\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mqiskit_ibm_runtime\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m SamplerV2\n\u001B[1;32m---> 10\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mqiskit_aer\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m AerSimulator\n\u001B[0;32m     11\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mqiskit\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mvisualization\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m plot_histogram\n\u001B[0;32m     12\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mqiskit\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mquantum_info\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m hellinger_fidelity\n",
+      "\u001B[1;31mModuleNotFoundError\u001B[0m: No module named 'qiskit_aer'"
+     ]
+    }
+   ],
    "execution_count": 1
   },
   {
Index: QuditsOnQubits/Example.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"id\": \"initial_id\",\r\n   \"metadata\": {\r\n    \"collapsed\": true,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T02:33:18.547195Z\",\r\n     \"start_time\": \"2025-02-27T02:33:15.124359Z\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"from QuditsOnQubits import QuditsOnQubits\\n\",\r\n    \"import networkx as nx\"\r\n   ],\r\n   \"outputs\": [],\r\n   \"execution_count\": 1\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T01:42:30.162750Z\",\r\n     \"start_time\": \"2025-02-27T01:42:30.046897Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ghz_circ = QuditsOnQubits()\\n\",\r\n   \"id\": \"871c9af571779539\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 3\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T01:42:41.829568Z\",\r\n     \"start_time\": \"2025-02-27T01:42:30.951539Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"bris = ghz_circ.brisbane()\",\r\n   \"id\": \"fc7b40a00aad5c8c\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 4\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"bris.draw('mpl', idle_wires=False)\",\r\n   \"id\": \"9bfc3dc3d89e6fbe\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T01:42:51.673001Z\",\r\n     \"start_time\": \"2025-02-27T01:42:51.645858Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ghz_circ.fidelity(\\\"Brisbane\\\")\",\r\n   \"id\": \"28f8e60b9cb4af53\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"0.8912308336442648\"\r\n      ]\r\n     },\r\n     \"execution_count\": 5,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 5\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ghz_circ.torino()\",\r\n   \"id\": \"582819bd4575c191\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T01:43:44.062646Z\",\r\n     \"start_time\": \"2025-02-27T01:43:44.050593Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"ghz_circ.fidelity(\\\"Torino\\\")\",\r\n   \"id\": \"e772a98e5e1462f3\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"0.9294169945978198\"\r\n      ]\r\n     },\r\n     \"execution_count\": 8,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 8\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T02:28:49.961136Z\",\r\n     \"start_time\": \"2025-02-27T02:28:49.874570Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"G = nx.Graph()\\n\",\r\n    \"\\n\",\r\n    \"n = 8\\n\",\r\n    \"\\n\",\r\n    \"G.add_nodes_from([0, n])\\n\",\r\n    \"\\n\",\r\n    \"vertexList = []\\n\",\r\n    \"\\n\",\r\n    \"for i in range(n):\\n\",\r\n    \"    G.add_edge(0, i+1)\\n\",\r\n    \"\\n\",\r\n    \"nx.draw(G, with_labels=True, font_weight='bold')\"\r\n   ],\r\n   \"id\": \"c9d6fcadc3a31ab9\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"<Figure size 640x480 with 1 Axes>\"\r\n      ],\r\n      \"image/png\": \"\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"execution_count\": 6\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T02:28:58.200610Z\",\r\n     \"start_time\": \"2025-02-27T02:28:52.662306Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"graph_state1 = QuditsOnQubits(G).circuit\",\r\n   \"id\": \"2aa2d49c24a1295a\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 7\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T02:28:59.544068Z\",\r\n     \"start_time\": \"2025-02-27T02:28:59.132458Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"graph_state1.draw(\\\"mpl\\\")\",\r\n   \"id\": \"bd13da6380bd94dd\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"<Figure size 891.005x1538.44 with 1 Axes>\"\r\n      ],\r\n      \"image/png\": \"\"\r\n     },\r\n     \"execution_count\": 8,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 8\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T02:33:40.588234Z\",\r\n     \"start_time\": \"2025-02-27T02:33:40.489418Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"SQ = nx.MultiGraph()\\n\",\r\n    \"\\n\",\r\n    \"SQ.add_nodes_from([0, 3])\\n\",\r\n    \"\\n\",\r\n    \"SQ.add_edge(0, 1)\\n\",\r\n    \"SQ.add_edge(1, 2)\\n\",\r\n    \"SQ.add_edge(2, 3)\\n\",\r\n    \"SQ.add_edge(3, 0)\\n\",\r\n    \"SQ.add_edge(0, 3)\\n\",\r\n    \"\\n\",\r\n    \"nx.draw(SQ, with_labels=True, font_weight='bold')\\n\",\r\n    \"\\n\",\r\n    \"SQ.number_of_edges()\"\r\n   ],\r\n   \"id\": \"edc4e1dc8796240f\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"5\"\r\n      ]\r\n     },\r\n     \"execution_count\": 6,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"<Figure size 640x480 with 1 Axes>\"\r\n      ],\r\n      \"image/png\": \"\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"execution_count\": 6\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T02:33:41.886561Z\",\r\n     \"start_time\": \"2025-02-27T02:33:41.829795Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"square_graph = QuditsOnQubits(SQ)\",\r\n   \"id\": \"5ef58c19d535ab26\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 7\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T02:33:42.369598Z\",\r\n     \"start_time\": \"2025-02-27T02:33:42.361088Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"squareState = square_graph.circuit\",\r\n   \"id\": \"ee3dcdd1232566cf\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 8\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-02-27T02:33:43.183709Z\",\r\n     \"start_time\": \"2025-02-27T02:33:42.955587Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"squareState.draw('mpl')\",\r\n   \"id\": \"44b4545b93fa30f2\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"<Figure size 621.941x702.333 with 1 Axes>\"\r\n      ],\r\n      \"image/png\": \"\"\r\n     },\r\n     \"execution_count\": 9,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 9\r\n  },\r\n  {\r\n   \"metadata\": {},\r\n   \"cell_type\": \"code\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null,\r\n   \"source\": \"\",\r\n   \"id\": \"b60963e18a6a731\"\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/QuditsOnQubits/Example.ipynb b/QuditsOnQubits/Example.ipynb
--- a/QuditsOnQubits/Example.ipynb	(revision 090da3ca4086661a8c49bfd7f5ed2e3c83e65783)
+++ b/QuditsOnQubits/Example.ipynb	(date 1740834118644)
@@ -25,7 +25,7 @@
     }
    },
    "cell_type": "code",
-   "source": "ghz_circ = QuditsOnQubits()\n",
+   "source": "ghz_circ = QuditsOnQubits()",
    "id": "871c9af571779539",
    "outputs": [],
    "execution_count": 3
Index: .idea/qudityD3.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"qudityPAN\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/qudityD3.iml b/.idea/qudityD3.iml
--- a/.idea/qudityD3.iml	(revision 090da3ca4086661a8c49bfd7f5ed2e3c83e65783)
+++ b/.idea/qudityD3.iml	(date 1740834118667)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="qudityPAN" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="qudityD3" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"7c5ba921-b384-478a-8d8e-f18c3237ef94\" name=\"Changes\" comment=\"comparison of ideal GHZ state with states created on the ibm brisbane and torino fakebackends\">\r\n      <change afterPath=\"$PROJECT_DIR$/QuditsOnQubits/QuditsOnQubits/__init__.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/QuditsOnQubits/QuditsOnQubits/ghz_creator.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/QuditsOnQubits/QuditsOnQubits/main.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/QuditsOnQubits/pyproject.toml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/chshQutrit.ipynb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/qudityD3.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/qudityD3.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/GHZstate.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/GHZstate.ipynb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/qutritGraphState.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/qutritGraphState.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;slysek&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/slysek/qudityD3.git&quot;,\r\n    &quot;accountId&quot;: &quot;76e72a72-ae97-4c1d-9a7c-5ce5744608b6&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2noXUgUP10SvTXq4SvXhEhiCCZ0\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/szymon/DataspellProjects/qudityD3/QuditsOnQubits&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\szymon\\DataspellProjects\\qudityD3\\QuditsOnQubits\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\szymon\\DataspellProjects\\qudityD3\" />\r\n      <recent name=\"C:\\Users\\szymon\\DataspellProjects\\qudityD3\\QuditsOnQubits\\QuditsOnQubits\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-80a6976e5986-7ba1f540c4e9-com.jetbrains.pycharm.ds.sharedIndexes.bundled-DS-242.22855.78\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Solovat-Kitaev algo\" />\r\n    <MESSAGE value=\"Matrix F on quantum circuit using cartan decomposition\" />\r\n    <MESSAGE value=\"new basis\" />\r\n    <MESSAGE value=\"Trying to add new method to find basis\" />\r\n    <MESSAGE value=\"CZ algo\" />\r\n    <MESSAGE value=\"GHZ state with partial trace verification\" />\r\n    <MESSAGE value=\"Final version of ghz state\" />\r\n    <MESSAGE value=\"generation of qutrit graph state and final version of ghz state\" />\r\n    <MESSAGE value=\"comparison of ideal GHZ state with states created on the ibm brisbane and torino fakebackends\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"comparison of ideal GHZ state with states created on the ibm brisbane and torino fakebackends\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 090da3ca4086661a8c49bfd7f5ed2e3c83e65783)
+++ b/.idea/workspace.xml	(date 1740834540507)
@@ -4,17 +4,14 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="7c5ba921-b384-478a-8d8e-f18c3237ef94" name="Changes" comment="comparison of ideal GHZ state with states created on the ibm brisbane and torino fakebackends">
-      <change afterPath="$PROJECT_DIR$/QuditsOnQubits/QuditsOnQubits/__init__.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/QuditsOnQubits/QuditsOnQubits/ghz_creator.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/QuditsOnQubits/QuditsOnQubits/main.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/QuditsOnQubits/pyproject.toml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/chshQutrit.ipynb" afterDir="false" />
+    <list default="true" id="7c5ba921-b384-478a-8d8e-f18c3237ef94" name="Changes" comment="bell inequality fixed">
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/qudityD3.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/qudityD3.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/GHZstate.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/GHZstate.ipynb" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/qutritGraphState.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/qutritGraphState.ipynb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/QuditsOnQubits/Example.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/QuditsOnQubits/Example.ipynb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/QuditsOnQubits/QuditsOnQubits/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/QuditsOnQubits/QuditsOnQubits/main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/QuditsOnQubits/chshTEST.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/QuditsOnQubits/chshTEST.ipynb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/QuditsOnQubits/pyproject.toml" beforeDir="false" afterPath="$PROJECT_DIR$/QuditsOnQubits/pyproject.toml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -38,12 +35,12 @@
     &quot;assignee&quot;: &quot;slysek&quot;
   }
 }</component>
-  <component name="GithubPullRequestsUISettings">{
-  &quot;selectedUrlAndAccountId&quot;: {
-    &quot;url&quot;: &quot;https://github.com/slysek/qudityD3.git&quot;,
-    &quot;accountId&quot;: &quot;76e72a72-ae97-4c1d-9a7c-5ce5744608b6&quot;
+  <component name="GithubPullRequestsUISettings"><![CDATA[{
+  "selectedUrlAndAccountId": {
+    "url": "https://github.com/slysek/qudityD3.git",
+    "accountId": "10ad2aab-224a-4b83-b561-2856c1f6dfc5"
   }
-}</component>
+}]]></component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 1
 }</component>
@@ -88,6 +85,7 @@
     <MESSAGE value="Final version of ghz state" />
     <MESSAGE value="generation of qutrit graph state and final version of ghz state" />
     <MESSAGE value="comparison of ideal GHZ state with states created on the ibm brisbane and torino fakebackends" />
-    <option name="LAST_COMMIT_MESSAGE" value="comparison of ideal GHZ state with states created on the ibm brisbane and torino fakebackends" />
+    <MESSAGE value="bell inequality fixed" />
+    <option name="LAST_COMMIT_MESSAGE" value="bell inequality fixed" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"qudityD3\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"qudityPAN\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyCharmDSProjectLayout\">\r\n    <option name=\"id\" value=\"JupyterRightHiddenStructureLayout\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 090da3ca4086661a8c49bfd7f5ed2e3c83e65783)
+++ b/.idea/misc.xml	(date 1740834118677)
@@ -3,7 +3,7 @@
   <component name="Black">
     <option name="sdkName" value="qudityD3" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="qudityPAN" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="qudityD3" project-jdk-type="Python SDK" />
   <component name="PyCharmDSProjectLayout">
     <option name="id" value="JupyterRightHiddenStructureLayout" />
   </component>
